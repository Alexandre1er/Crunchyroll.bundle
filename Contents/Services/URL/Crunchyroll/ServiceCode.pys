import re

API_URL = "https://api.crunchyroll.com"
API_HEADERS = {'User-Agent':"Mozilla/5.0 (PLAYSTATION 3; 4.31)", 'Host':"api.crunchyroll.com", 'Accept-Encoding':"gzip, deflate", 'Accept':"*/*", 'Content-Type':"application/x-www-form-urlencoded"}
API_VERSION = "1.0.1"
API_LOCALE = "enUS" 
API_ACCESS_TOKEN = "S7zg3vKx6tRZ0Sf"
API_DEVICE_TYPE = "com.crunchyroll.ps3"

####################################################################################################
def NormalizeURL(url):
	return url
	
####################################################################################################
def MetadataObjectForURL(url):
	#Maybe i'll do something later...
	return

####################################################################################################
def MediaObjectsForURL(url):
		
	MediaObjects = []	
	
	#Split the URL to get the media_id
	media_id = url.split('-')[-1]
	
	#resolution lookup table
	reslookup = {'SD':'176', '480P':'480', '720P':'720', '1080P':'720', 'Ask':'Ask'}
	
	#Make the API call 
	fields = "media.episode_number,media.name,media.description,media.url,media.stream_data"
	options = {'session_id':'bkb6y05hmwqzcy6zarllfnk6nd1gagy3', 'version':API_VERSION, 'locale':API_LOCALE, 'media_id':media_id, 'fields':fields} 
	request = JSON.ObjectFromURL(API_URL+"/info.0.json", values=options, cacheTime=0, headers=API_HEADERS)
	Log.Debug("Crunchyroll.bundle ----> info request: "+str(request))
	
	if request['error'] is False:	
		if request['data']['stream_data'] is not None:
			for stream in request['data']['stream_data']['streams']:			
				if stream['quality'] == 'adaptive': continue #Don't know if these streams are useable yet... Just going to skip for now. 
				if stream['height'] != reslookup[Prefs['quality']] and Prefs['quality'] != 'Ask': continue
				
				aspect_ration = float(stream['width']) / float(stream['height'])
				
				Log.Debug("Crunchyroll.bundle ----> aspect ration is: "+str(aspect_ration))
				MediaObjects.append(
					MediaObject(
						parts = [PartObject(key=Callback(PlayVideo, url=stream['url']))],
						video_resolution = int(stream['height']),
						bitrate = stream['bitrate'], 
						audio_channels = 2,
						protocol = 'hls',
						container = 'mpegts',
						video_codec = VideoCodec.H264,
						audio_codec = AudioCodec.AAC,
						aspect_ratio = str(aspect_ration),
						optimized_for_streaming = True,
						video_frame_rate = '24p'),)
		
	return MediaObjects

####################################################################################################
@indirect
def PlayVideo(url):
	try:
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=url))
	except:
		raise Ex.MediaNotAvailable
	