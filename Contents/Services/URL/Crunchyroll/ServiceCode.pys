import random, re, string
import dateutil.tz, dateutil.relativedelta, dateutil.parser
import datetime

dateutilparser = dateutil.parser() #Because i have no idea why i can't call dateutil.parser.parse() directly... 

API_URL = "https://api.crunchyroll.com"
API_HEADERS = {'User-Agent':"Mozilla/5.0 (iPhone; iPhone OS 8.3.0; en_US)", 'Host':"api.crunchyroll.com", 'Accept-Encoding':"gzip, deflate", 'Accept':"*/*", 'Content-Type':"application/x-www-form-urlencoded"}
API_VERSION = "2313.8"
API_ACCESS_TOKEN = "QWjz212GspMHH9h"
API_DEVICE_TYPE = "com.crunchyroll.iphone"

####################################################################################################
def NormalizeURL(url):
	return url

####################################################################################################
def MetadataObjectForURL(url):
	
	#Split the URL to get the session_id
	session_id = url.split('&')[1]
	
	#Remove the Session ID from the URL
	url = url.split('&')[0]
	
	#Split the URL to get the media_id
	media_id = url.split('-')[-1]
	
	#Make the API call 
	fields = "media.episode_number,media.name,media.description,media.media_type,media.series_name,media.available,media.available_time,media.duration,media.url,media.screenshot_image,image.fwide_url"
	options = {'session_id':session_id, 'version':API_VERSION, 'media_id':media_id, 'fields':fields} 
	request = JSON.ObjectFromURL(API_URL+"/info.0.json", values=options, cacheTime=0, headers=API_HEADERS)
	
	if request['error'] is False:	
		#Dates, times, and such
		current_datetime = datetime.datetime.now(dateutil.tz.tzutc()) 
		available_datetime = dateutilparser.parse(request['data']['available_time']).astimezone(dateutil.tz.tzlocal()) 
		available_date = available_datetime.date() 
		available_delta = available_datetime - current_datetime
		available_in = str(available_delta.days)+" days." if available_delta.days > 0 else str(available_delta.seconds/60/60)+" hours."
		
		#Fix Crunchyroll inconsistencies
		request['data']['episode_number'] = re.sub('\D', '', request['data']['episode_number'])	#Because CR puts letters into some rare episode numbers.
		request['data']['episode_number'] = '0' if request['data']['episode_number'] == '' else request['data']['episode_number'] #PV episodes have no episode number so we set it to 0. 
		name = "Episode "+str(request['data']['episode_number']) if request['data']['name'] == '' else request['data']['name'] #CR doesn't seem to include episode names for all media so we have to make one up. 	
		name = "Coming Soon" if request['data']['available'] is False else name #Set the name for upcoming episodes
		#season = '1' if season == '0' else season #There is a bug which prevents Season 0 from displaying correctly in PMC. This is to help fix that. Will break if a series has both season 0 and 1.  ##########NOT NEEDED IN SERVICE CODE##########
		thumb = "http://static.ak.crunchyroll.com/i/no_image_beta_full.jpg" if request['data']['screenshot_image'] is None else request['data']['screenshot_image']['fwide_url'] #because not all shows have thumbnails.
		thumb = "http://static.ak.crunchyroll.com/i/coming_soon_beta_fwide.jpg" if request['data']['available'] is False else thumb #Sets the thumbnail to coming soon if the episode isn't available yet.
		description = "This episode will be available in "+str(available_in) if request['data']['available'] is False else request['data']['description'] #Set the description for upcoming episodes.
		duration = int(0) if request['data']['available'] is False else int((float(request['data']['duration']) * 1000))
		#url = media['url']+str('&')+Dict['session_id'] #Add the session_id to the URL for the URLService  ##########NOT NEEDED IN SERVICE CODE##########
		
		try:
			return EpisodeObject(
				url = request['data']['url'],
				title = name,
				summary = description,
				originally_available_at = available_date,
				index = int(request['data']['episode_number']),
				show = request['data']['series_name'],
				thumb = thumb,
				duration = duration
			)
		except:
			raise Ex.MediaNotAvailable
	else: 
		raise Ex.MediaNotAvailable

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url+"&ultra"))],
			video_resolution = '1080',
			audio_channels = 2,
			protocol = 'hls',
			container = 'mpegts',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			aspect_ratio = str(1.78),
			optimized_for_streaming = True,
			video_frame_rate = '24p'
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url+"&high"))],
			video_resolution = '720',
			audio_channels = 2,
			protocol = 'hls',
			container = 'mpegts',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			aspect_ratio = str(1.78),
			optimized_for_streaming = True,
			video_frame_rate = '24p'
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url+"&mid"))],
			video_resolution = '480',
			audio_channels = 2,
			protocol = 'hls',
			container = 'mpegts',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			aspect_ratio = str(1.78),
			optimized_for_streaming = True,
			video_frame_rate = '24p'
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url+"&low"))],
			video_resolution = '360',
			audio_channels = 2,
			protocol = 'hls',
			container = 'mpegts',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			aspect_ratio = str(1.78),
			optimized_for_streaming = True,
			video_frame_rate = '24p'
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	#Split the URL to get the session_id & quality
	session_id = url.split('&')[1]
	quality = url.split('&')[2]
	
	#Remove the Session ID and quality from the URL
	url = url.split('&')[0]
	
	#Split the URL to get the media_id
	media_id = url.split('-')[-1]
	
	#Make the API call 
	fields = "media.episode_number,media.name,media.description,media.url,media.stream_data"
	options = {'session_id':session_id, 'version':API_VERSION, 'media_id':media_id, 'fields':fields} 
	request = JSON.ObjectFromURL(API_URL+"/info.0.json", values=options, cacheTime=0, headers=API_HEADERS)
	
	if request['error'] is False:	
		if request['data']['stream_data'] is not None:
			for stream in request['data']['stream_data']['streams']:	
				if stream['quality'] == quality: 
					try:
						return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=stream['url']))
					except:
						raise Ex.MediaNotAvailable
		else: 
			raise Ex.MediaNotAvailable
	else: 
		raise Ex.MediaNotAvailable
